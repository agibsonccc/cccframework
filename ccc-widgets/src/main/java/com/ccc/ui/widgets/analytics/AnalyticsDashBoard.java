package com.ccc.ui.widgets.analytics;

import java.util.Date;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.ccc.mail.mailinglist.model.MailingList;
import com.ccc.publisher.model.FacebookPage;
import com.ccc.publisher.model.TwitterAccount;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.PopupDateField;
@Component("analyticsDashBoard")
@Scope("session")
public class AnalyticsDashBoard extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private NativeSelect metricSelect;
	@AutoGenerated
	private Button searchButton;
	@AutoGenerated
	private PopupDateField toField;
	@AutoGenerated
	private PopupDateField fromField;
	@AutoGenerated
	private ListSelect analyticsAccountSelect;
	private String[] facebookMetrics={"Post Interaction","Likes","Reach","Share rate","Comments"};
	private String[] twitterMetrics={"Follower change","Retweets"};
	private String[] mailMetrics={"Subscriber change","Clicks","Number sent","Bounces"};

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public AnalyticsDashBoard() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		setWidth("1000px");
		setHeight("1000px");
		analyticsAccountSelect.addListener(new ListSelect.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				Object value=event.getProperty().getValue();
				if(value instanceof FacebookPage) {
					setMetricOptions(facebookMetrics);
				}
				else if(value instanceof TwitterAccount) {
					setMetricOptions(twitterMetrics);
				}
				else if(value instanceof MailingList) {
					setMetricOptions(mailMetrics);
				}
			}
			
		});
		
	}

	

	private void setMetricOptions(String[] arr) {
		metricSelect.removeAllItems();
		for(String s : arr) {
			metricSelect.addItem(s);
		}
	}
	
	public NativeSelect metricSelect() {
		return metricSelect;
	}
	
	public Date getTo() {
		return (Date) toField.getValue();
	}
	
	public Date getFrom() {
		return (Date) fromField.getValue();
	}
	
	
	public ListSelect getAnalyticsAccountSelect() {
		return analyticsAccountSelect;
	}

	public void setAnalyticsAccountSelect(ListSelect analyticsAccountSelect) {
		this.analyticsAccountSelect = analyticsAccountSelect;
	}
	public Button getSearchButton() {
		return searchButton;
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("1000px");
		mainLayout.setHeight("1000px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("1000px");
		setHeight("1000px");
		
		// analyticsAccountSelect
		analyticsAccountSelect = new ListSelect();
		analyticsAccountSelect.setCaption("Pick an account to look at:");
		analyticsAccountSelect.setImmediate(false);
		analyticsAccountSelect.setWidth("200px");
		analyticsAccountSelect.setHeight("-1px");
		mainLayout.addComponent(analyticsAccountSelect,
				"top:87.0px;left:0.0px;");
		
		// fromField
		fromField = new PopupDateField();
		fromField.setCaption("From:");
		fromField.setImmediate(false);
		fromField.setWidth("200px");
		fromField.setHeight("-1px");
		fromField.setInvalidAllowed(false);
		mainLayout.addComponent(fromField, "top:37.0px;left:0.0px;");
		
		// toField
		toField = new PopupDateField();
		toField.setCaption("To:");
		toField.setImmediate(false);
		toField.setWidth("200px");
		toField.setHeight("-1px");
		toField.setInvalidAllowed(false);
		mainLayout.addComponent(toField, "top:37.0px;left:200.0px;");
		
		// searchButton
		searchButton = new Button();
		searchButton.setCaption("Search");
		searchButton.setImmediate(true);
		searchButton.setWidth("-1px");
		searchButton.setHeight("-1px");
		mainLayout.addComponent(searchButton, "top:37.0px;left:420.0px;");
		
		// metricSelect
		metricSelect = new NativeSelect();
		metricSelect.setCaption("Metric:");
		metricSelect.setImmediate(false);
		metricSelect.setWidth("100px");
		metricSelect.setHeight("-1px");
		mainLayout.addComponent(metricSelect, "top:80.0px;left:220.0px;");
		
		return mainLayout;
	}

}
