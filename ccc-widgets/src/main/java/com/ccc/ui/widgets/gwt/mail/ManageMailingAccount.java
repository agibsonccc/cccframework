package com.ccc.ui.widgets.gwt.mail;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.DependsOn;
import org.springframework.context.annotation.Scope;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.util.Assert;

import com.ccc.mail.mailinglist.model.MailingList;
import com.ccc.mail.mailinglist.model.Subscriber;
import com.ccc.mail.mailinglist.services.api.MailingListService;
import com.ccc.util.filesystem.FileMoverUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Upload.FailedEvent;
import com.vaadin.ui.Upload.FailedListener;
import com.vaadin.ui.Upload.SucceededEvent;
import com.vaadin.ui.Upload.SucceededListener;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
@Component
@Scope("session")
@DependsOn("appSyc")

public class ManageMailingAccount extends CustomComponent   implements Upload.SucceededListener,
Upload.FailedListener,
Upload.Receiver {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private VerticalLayout verticalLayout_4;
	@AutoGenerated
	private VerticalLayout emailBottom;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private Button emailSubmit;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;
	@AutoGenerated
	private Button deleteSubscriber;
	@AutoGenerated
	private TextArea addEmailCSVTextArea;
	@AutoGenerated
	private ListSelect subscriberSelect;
	@AutoGenerated
	private Upload uploadCSV;
	@AutoGenerated
	private Label emailCSVLabel;
	@AutoGenerated
	private VerticalLayout emailNameLayout;
	@AutoGenerated
	private VerticalLayout verticalLayout_3;
	@AutoGenerated
	private TextField emailInputText;
	@AutoGenerated
	private Label emailLabel;
	@AutoGenerated
	private TextField emailNameInputText;
	@AutoGenerated
	private Label emailNameLabel;
	@AutoGenerated
	private VerticalLayout mailingLists;
	@AutoGenerated
	private Button deleteList;
	@AutoGenerated
	private ListSelect mailingListSelect;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private String userName;
	private static Logger log=LoggerFactory.getLogger(ManageMailingAccount.class);
	public void setUserName(String userName) {
		this.userName=userName;
	}

	public String getUserName() {
		return userName;
	}

	public Button getDeleteSubscriber() {
		return deleteSubscriber;
	}

	public ListSelect getSubscriberSelect() { 
		return subscriberSelect;
	}
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private MailingListService mailingListService;


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public MailingListService getMailingListService() {
		return mailingListService;
	}

	public void setMailingListService(MailingListService mailingListService) {
		this.mailingListService = mailingListService;
	}

	public ListSelect getMailingListSelect() {
		return mailingListSelect;
	}

	public void setMailingListSelect(ListSelect mailingListSelect) {
		this.mailingListSelect = mailingListSelect;
	}
	private MailingList currentList;
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private File file;
	private Collection<Subscriber> selectedSubscriber;
	public Upload getUploadCSV() {
		return uploadCSV;
	}

	public MailingList getCurrentList() {
		return currentList;
	}

	public void setCurrentList(MailingList currentList) {
		this.currentList = currentList;
	}

	public void setUploadCSV(Upload uploadCSV) {
		this.uploadCSV = uploadCSV;
	}

	public TextField getEmailInputText() {
		return emailInputText;
	}

	public void setEmailInputText(TextField emailInputText) {
		this.emailInputText = emailInputText;
	}

	public TextField getEmailNameInputText() {
		return emailNameInputText;
	}

	public void setEmailNameInputText(TextField emailNameInputText) {
		this.emailNameInputText = emailNameInputText;
	}

	public VerticalLayout getMailingLists() {
		return mailingLists;
	}

	public void setMailingLists(VerticalLayout mailingLists) {
		this.mailingLists = mailingLists;
	}


	public void setEmailSubmit(Button emailSubmit) {
		this.emailSubmit = emailSubmit;
	}



	public void setEmailList(String emailList) {
		this.emailList = emailList;
	}


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */




	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */



	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ManageMailingAccount() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		/*
		emailInputTextArea.addListener(new TextChangeListener() {

			public void textChange(TextChangeEvent event) {
				String text=event.getText();
				email=text;
			}

		});
		 */

		subscriberSelect.setImmediate(true);
		mailingListSelect.setImmediate(true);
		emailNameInputText.addListener(new TextChangeListener() {

			public void textChange(TextChangeEvent event) {
				String text=event.getText();
				emailName=text;
			}

		});

		emailSubmit.addListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				//Add new?
				final Object idForNull=mailingListSelect.getNullSelectionItemId();

				if(currentList==null || mailingListSelect.getValue()==null || mailingListSelect.getValue().equals(idForNull)) {
					String email= getEmailInputText()!= null ?(String) getEmailInputText().getValue(): null;
					String emailName=getEmailNameInputText()!=null ?(String) getEmailNameInputText().getValue() : null;
					if(email==null || email.isEmpty()) {
						Window warn = new Window("No email");
						warn.addComponent(new Label("Please add an email"));
						warn.center();

						return;
					}
					if(emailName==null || emailName.isEmpty()) {
						Window warn = new Window("No list name");
						warn.addComponent(new Label("Please add a list name"));
						warn.center();
						return;
					}
					MailingList save = new MailingList();
					save.setMailingAddress(email);
					save.setName(emailName);
					Authentication auth=SecurityContextHolder.getContext().getAuthentication();

					if(userName==null && auth!=null) 
						userName=SecurityContextHolder.getContext().getAuthentication().getName();

					save.setOwner(userName);
					mailingListService.addMailingList(save);
					Item item=mailingListSelect.addItem(save);
					if(item==null) {
						throw new IllegalStateException("Problem adding item to box");
					}
					String emails=(String)addEmailCSVTextArea.getValue();
					if(emails!=null && !emails.isEmpty()) {
						String[] split=emails.split(",");
						mailingListService.addEmails(save, split);
						addEmailCSVTextArea.setValue("");
					}
					getEmailInputText().setValue("");
					getEmailNameInputText().setValue("");
				}


				String value=(String) addEmailCSVTextArea.getValue();
				if(value==null || value.isEmpty()) {
					return;
				}
				else {
					String[] split=value.split(",");
					if(split!=null && split.length >=1) {
						mailingListService.addEmails(currentList, split);
						addEmailCSVTextArea.setValue("");
						String email=currentList.getMailingAddress();
						List<MailingList> lists=mailingListService.listsWithEmail(email);
						for(MailingList list : lists) {
							if(list.getId()==currentList.getId()) {
								Set<Subscriber> subs=list.getSubscribers();
								if(subs!=null && !subs.isEmpty())
								for(Subscriber subscriber : subs) {
									Assert.notNull(subscriberSelect.addItem(subscriber),"Couldn't add item");
								}
							}
						}
						
					}

				}

			}
		});

		mailingListSelect.setImmediate(true);
		mailingListSelect.setNullSelectionAllowed(true);
		final Object idForNull=mailingListSelect.getNullSelectionItemId();


		mailingListSelect.addListener(new Property.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				Property prop=event.getProperty();
				if(prop.getValue()==null  || prop.getValue().equals(idForNull)) {
					subscriberSelect.removeAllItems();

					return;
				}
				else {
					MailingList list=(MailingList) prop.getValue();

					if(list==null) return;
					TextField email=getEmailInputText();
					if(email!=null) email.setImmediate(true);
					email.setValue(list.getMailingAddress());
					TextField emailName=getEmailNameInputText();
					emailName.setImmediate(true);
					emailName.setValue(list.getName());

					Set<Subscriber> subs=list.getSubscribers();
					subscriberSelect.removeAllItems();
					if(subs!=null) {
						for(Subscriber sub : subs) {
							Item item=subscriberSelect.addItem(sub);
							if(item==null) log.warn("Failed to add: " + sub);
						}
					}


				}
			}

		});
		/*
		emailInputTextArea.addListener(new TextChangeListener() {

			public void textChange(TextChangeEvent event) {
				emailList=event.getText();
			}

		});
		 */
		mailingListSelect.setImmediate(true);
		mailingListSelect.addListener(new Property.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				Property prop=event.getProperty();
				setCurrentList((MailingList) prop.getValue());

			}

		});

		mailingListSelect.addListener(new Property.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				Property prop=event.getProperty();
				if(prop.getValue()!=null) {
					Object obj= prop.getValue();
					if(obj instanceof Collection) {
						selectedSubscriber=(Collection<Subscriber>) obj;
						for(Subscriber sub : selectedSubscriber) {
							subscriberSelect.addItem(sub);
						}
					}
					else if(obj instanceof Subscriber) {
						selectedSubscriber=Collections.singleton((Subscriber) obj);

						for(Subscriber sub : selectedSubscriber) {
							subscriberSelect.addItem(sub);
						}
					}
				}
			}

		});

		deleteSubscriber.addListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				if(selectedSubscriber!=null) {
					for(Subscriber sub : selectedSubscriber) {
						mailingListService.deleteSubscriber(sub);
						subscriberSelect.removeItem(sub);
					}
				}

			}
		});

		deleteList.addListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				if(currentList!=null){
					try {
						Item item=mailingListSelect.getItem(currentList);
						if(item!=null) {
							mailingListService.deleteMailingList(currentList);

							mailingListSelect.removeItem(currentList);


						}
					}catch(Exception e) {
						log.error("Error deleting from maiing list",e);
					}
					//currentList=null;

				}
			}
		});

		addUploadListener();
	}

	private void addUploadListener() {
		uploadCSV.addListener((SucceededListener)this);
		uploadCSV.addListener((FailedListener)this);
		uploadCSV.setReceiver(this);
	}


	@Override
	public OutputStream receiveUpload(String filename, String mimeType) {
		FileOutputStream fos = null; // Output stream to write to
		String prefix="/tmp/uploads/";
		File dir = new File(prefix);
		if(!dir.exists()) dir.mkdirs();
		file = new File("/tmp/uploads/" + filename);
		if(!file.exists())  {
			try {
				FileMoverUtil.createFile(file,false);
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}



		try {
			// Open the file for writing.
			fos = new FileOutputStream(file);
		} catch (final java.io.FileNotFoundException e) {
			// Error while opening the file. Not reported here.
			e.printStackTrace();
			return null;
		}

		return fos; // Return the output stream to write to
	}

	public void uploadFailed(FailedEvent event) {
		Window warning = new Window("Failed upload");
		warning.addComponent(new Label("Couldn't upload file: " + event.getFilename()));
		this.getApplication().getMainWindow().addWindow(warning);
	}

	public void uploadSucceeded(SucceededEvent event) {
		List<List<String>> ret=  FileMoverUtil.readCSV(file);

		for(List<String> list : ret) {
			mailingListService.addEmails(currentList, list);
		}
	}


	public TextField getEmailText() {
		return emailNameInputText;
	}
	public Button getEmailSubmit() {
		return emailSubmit;
	}
	public TextField getEmailNameText() {
		return emailNameInputText;
	}
	public String getEmailName() {
		return emailName;
	}

	public String getEmail() {
		return email;
	}

	public String getEmailList() {
		return emailList;
	}
	private String emailName;

	private String email;

	private String emailList;


	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("500px");
		mainLayout.setHeight("680px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("500px");
		setHeight("680px");
		
		// verticalLayout_4
		verticalLayout_4 = buildVerticalLayout_4();
		mainLayout.addComponent(verticalLayout_4, "top:0.0px;left:0.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_4() {
		// common part: create layout
		verticalLayout_4 = new VerticalLayout();
		verticalLayout_4.setImmediate(false);
		verticalLayout_4.setWidth("-1px");
		verticalLayout_4.setHeight("-1px");
		verticalLayout_4.setMargin(false);
		
		// emailNameLayout
		emailNameLayout = buildEmailNameLayout();
		verticalLayout_4.addComponent(emailNameLayout);
		
		// emailBottom
		emailBottom = buildEmailBottom();
		verticalLayout_4.addComponent(emailBottom);
		
		return verticalLayout_4;
	}

	@AutoGenerated
	private VerticalLayout buildEmailNameLayout() {
		// common part: create layout
		emailNameLayout = new VerticalLayout();
		emailNameLayout.setImmediate(false);
		emailNameLayout.setWidth("420px");
		emailNameLayout.setHeight("-1px");
		emailNameLayout.setMargin(false);
		
		// mailingLists
		mailingLists = buildMailingLists();
		emailNameLayout.addComponent(mailingLists);
		
		// emailNameLabel
		emailNameLabel = new Label();
		emailNameLabel.setImmediate(false);
		emailNameLabel.setWidth("-1px");
		emailNameLabel.setHeight("-1px");
		emailNameLabel.setValue("Name of List");
		emailNameLayout.addComponent(emailNameLabel);
		
		// emailNameInputText
		emailNameInputText = new TextField();
		emailNameInputText.setImmediate(false);
		emailNameInputText.setWidth("300px");
		emailNameInputText.setHeight("22px");
		emailNameInputText.setSecret(false);
		emailNameLayout.addComponent(emailNameInputText);
		
		// verticalLayout_3
		verticalLayout_3 = buildVerticalLayout_3();
		emailNameLayout.addComponent(verticalLayout_3);
		
		return emailNameLayout;
	}

	@AutoGenerated
	private VerticalLayout buildMailingLists() {
		// common part: create layout
		mailingLists = new VerticalLayout();
		mailingLists
				.setCaption("Pick a new mailing list to edit or leave the selection blank to add a new one");
		mailingLists.setImmediate(false);
		mailingLists
				.setDescription("To add a new mailing list, just leave the mailing list selection blank");
		mailingLists.setWidth("300px");
		mailingLists.setHeight("-1px");
		mailingLists.setMargin(false);
		
		// mailingListSelect
		mailingListSelect = new ListSelect();
		mailingListSelect.setImmediate(false);
		mailingListSelect.setWidth("120px");
		mailingListSelect.setHeight("100px");
		mailingLists.addComponent(mailingListSelect);
		
		// deleteList
		deleteList = new Button();
		deleteList.setStyleName("decorated");
		deleteList.setCaption("Delete List");
		deleteList.setImmediate(true);
		deleteList.setWidth("120px");
		deleteList.setHeight("-1px");
		mailingLists.addComponent(deleteList);
		
		return mailingLists;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_3() {
		// common part: create layout
		verticalLayout_3 = new VerticalLayout();
		verticalLayout_3.setImmediate(false);
		verticalLayout_3.setWidth("300px");
		verticalLayout_3.setHeight("42px");
		verticalLayout_3.setMargin(false);
		
		// emailLabel
		emailLabel = new Label();
		emailLabel.setImmediate(false);
		emailLabel.setWidth("-1px");
		emailLabel.setHeight("-1px");
		emailLabel.setValue("Email:");
		verticalLayout_3.addComponent(emailLabel);
		
		// emailInputText
		emailInputText = new TextField();
		emailInputText.setImmediate(false);
		emailInputText.setWidth("300px");
		emailInputText.setHeight("-1px");
		emailInputText.setSecret(false);
		verticalLayout_3.addComponent(emailInputText);
		
		return verticalLayout_3;
	}

	@AutoGenerated
	private VerticalLayout buildEmailBottom() {
		// common part: create layout
		emailBottom = new VerticalLayout();
		emailBottom.setImmediate(false);
		emailBottom.setWidth("460px");
		emailBottom.setHeight("-1px");
		emailBottom.setMargin(false);
		
		// emailCSVLabel
		emailCSVLabel = new Label();
		emailCSVLabel.setImmediate(false);
		emailCSVLabel.setWidth("-1px");
		emailCSVLabel.setHeight("-1px");
		emailCSVLabel
				.setValue("Please put a comma separated list of emails below or upload a csv to add to this list.");
		emailBottom.addComponent(emailCSVLabel);
		
		// verticalLayout_1
		verticalLayout_1 = buildVerticalLayout_1();
		emailBottom.addComponent(verticalLayout_1);
		
		return emailBottom;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("460px");
		verticalLayout_1.setHeight("255px");
		verticalLayout_1.setMargin(false);
		
		// uploadCSV
		uploadCSV = new Upload();
		uploadCSV.setStyleName("decorated");
		uploadCSV.setImmediate(false);
		uploadCSV.setWidth("-1px");
		uploadCSV.setHeight("40px");
		verticalLayout_1.addComponent(uploadCSV);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		verticalLayout_1.addComponent(horizontalLayout_1);
		
		// emailSubmit
		emailSubmit = new Button();
		emailSubmit.setStyleName("decorated");
		emailSubmit.setCaption("Submit");
		emailSubmit.setImmediate(true);
		emailSubmit.setWidth("-1px");
		emailSubmit.setHeight("-1px");
		verticalLayout_1.addComponent(emailSubmit);
		
		return verticalLayout_1;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		
		// subscriberSelect
		subscriberSelect = new ListSelect();
		subscriberSelect.setCaption("Current Subscribers in this list:");
		subscriberSelect.setImmediate(false);
		subscriberSelect.setWidth("200px");
		subscriberSelect.setHeight("-1px");
		horizontalLayout_1.addComponent(subscriberSelect);
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		horizontalLayout_1.addComponent(verticalLayout_2);
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("-1px");
		verticalLayout_2.setHeight("-1px");
		verticalLayout_2.setMargin(false);
		
		// addEmailCSVTextArea
		addEmailCSVTextArea = new TextArea();
		addEmailCSVTextArea.setCaption("Type Comma separated emails here:");
		addEmailCSVTextArea.setImmediate(false);
		addEmailCSVTextArea.setWidth("280px");
		addEmailCSVTextArea.setHeight("127px");
		verticalLayout_2.addComponent(addEmailCSVTextArea);
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		verticalLayout_2.addComponent(horizontalLayout_2);
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("-1px");
		horizontalLayout_2.setHeight("-1px");
		horizontalLayout_2.setMargin(false);
		
		// deleteSubscriber
		deleteSubscriber = new Button();
		deleteSubscriber.setStyleName("decorated");
		deleteSubscriber.setCaption("Delete Subscriber");
		deleteSubscriber.setImmediate(true);
		deleteSubscriber.setWidth("-1px");
		deleteSubscriber.setHeight("-1px");
		horizontalLayout_2.addComponent(deleteSubscriber);
		
		return horizontalLayout_2;
	}


}
